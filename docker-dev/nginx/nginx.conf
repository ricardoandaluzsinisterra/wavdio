events {}

http {

    include mime.types;
    types {
        audio/mpeg mp3;
        audio/wav wav;
        audio/flac flac;
        audio/aac aac;
        audio/ogg ogg;
        audio/mp4 m4a;
    }

    client_max_body_size 100M;

    upstream home-svc {
        server home-svc:443;
    }

    upstream user-svc {
        server user-svc:443;
    }

    upstream upload-svc {
        server upload-svc:443;
    }

    upstream player-svc {
        server player-svc:443;
    }

    upstream catalog-svc {
        server catalog-svc:443;
    }

    # Redirect all HTTP traffic to HTTPS
    server {
        listen 80;
        server_name localhost;

        location / {
            return 301 https://$host$request_uri;
        }

        location /home {
            return 301 https://$host$request_uri;
        }

        location /upload {
            return 301 https://$host$request_uri;
        }

        location /player {
            return 301 https://$host$request_uri;
        }

        location /catalog {
            return 301 https://$host$request_uri;
        }

        location /audio {
            return 301 https://$host$request_uri;
        }
    }

    # HTTPS Server Block
    server {
        listen 443 ssl;
        server_name localhost;

        # SSL Certificates
        ssl_certificate /etc/nginx/certs/cert.pem;
        ssl_certificate_key /etc/nginx/certs/key.pem;

        # Optional: Strong SSL Security
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers HIGH:!aNULL:!MD5;

        location /audio/ {
        alias /usr/share/nginx/html/audio/;
        autoindex off;
        
        # CORS headers
        add_header 'Access-Control-Allow-Origin' '*' always;
        add_header 'Access-Control-Allow-Methods' 'GET, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range' always;
        add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;
        
        # Audio streaming settings
        add_header 'Accept-Ranges' 'bytes';
        
        # Cache settings
        expires 30d;
        add_header Cache-Control "public, no-transform";
        
        # Handle OPTIONS preflight requests
        if ($request_method = 'OPTIONS') {
            return 204;
        }
    }

        # Proxy to Flask services over HTTPS
        location / {
            proxy_pass https://user-svc;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        location /home {
            proxy_pass https://home-svc;
        }

        location /upload {
            proxy_pass https://upload-svc;
        }

        location /player {
            proxy_pass https://player-svc;
        }

        location /catalog {
            proxy_pass https://catalog-svc;
        }

        location /audio {
            alias /usr/share/nginx/html/audio;
        }
    }
}
